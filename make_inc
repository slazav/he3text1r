#!/bin/sh -efu
# This script creates compatable include files for
# C and Fortran languages.
# MAXN parameter for array sizes and texture structure
# is written there.
# $defs file is used to get correct order and names of structure
# fields.

defs=text1r.def
ch=text1r.h
fh=text1r.fh
struct=text1r_pars
MAXN=200


### C
# write header and MAXN parameter
cat > $ch <<EOF
/* This file is generated by $0 script.
   Don't modify it! */

#define MAXN $MAXN

EOF

# write the structure
echo "typedef struct{" >> $ch

sed -n '
  s/ARR(\([a-zA-Z0-9_]\+\))/  double \1[MAXN];/p
  s/DBL(\([a-zA-Z0-9_]\+\))/  double \1;/p
  s/INT(\([a-zA-Z0-9_]\+\))/  int \1;/p
' < $defs >> $ch

cat >> $ch <<EOF
} ${struct}_t;

extern ${struct}_t ${struct}_;
EOF


### Fortran
# write header and MAXN parameter
cat > $fh <<EOF
! This file is generated by $0 script.
! Don't modify it!

      integer MAXN ! size of all arrays
      parameter (MAXN=$MAXN)

EOF

# write structure fields
sed -n '
  s|//|!|
  s|/\*|!|
  s|\*/||
  s/ARR(\([a-zA-Z0-9_]\+\))/      real*8 text_\1(MAXN)/p
  s/DBL(\([a-zA-Z0-9_]\+\))/      real*8 text_\1/p
  s/INT(\([a-zA-Z0-9_]\+\))/      integer text_\1/p
' < $defs >> $fh

echo "" >> $fh

# Write common block
# 1. create a single line:
names="$(cat $defs |
  sed -n 's/\(ARR\|DBL\|INT\)(\([a-zA-Z0-9_]\+\)).*/text_\2/p' |
  tr '\n' ',' |
  sed 's/^/common \/'$struct'\/ /; s/,$//; s/,/, /g')"

# 2. split line according to fortran rules
#    (F90 and F77 compatibility: & at 5 and 73 columns)
echo $names | fold -s -w 64 |
while read l; do printf "%6s  %-65s&\n" '&' "$l"; done |
sed '1s/&/ /; $s/ *&$//' >> $fh
